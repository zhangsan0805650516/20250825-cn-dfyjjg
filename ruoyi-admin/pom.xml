<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>ruoyi</artifactId>
        <groupId>com.ruoyi</groupId>
        <version>3.8.7</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <artifactId>ruoyi-admin</artifactId>

    <description>
        web服务入口
    </description>

    <dependencies>

        <!-- spring-boot-devtools -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional> <!-- 表示依赖不会传递 -->
        </dependency>

        <!-- swagger3-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
        </dependency>

        <!-- 防止进入swagger页面报类型转换错误，排除3.0.0中的引用，手动增加1.6.2版本 -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
            <version>1.6.2</version>
        </dependency>

        <!-- Mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- 核心模块-->
        <dependency>
            <groupId>com.ruoyi</groupId>
            <artifactId>ruoyi-framework</artifactId>
        </dependency>

        <!-- 定时任务-->
        <dependency>
            <groupId>com.ruoyi</groupId>
            <artifactId>ruoyi-quartz</artifactId>
        </dependency>

        <!-- 代码生成-->
        <dependency>
            <groupId>com.ruoyi</groupId>
            <artifactId>ruoyi-generator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <defaultGoal>compile</defaultGoal>
        <plugins>
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.6.0</version>
                <executions>
                    <execution>
                        <!--打包的时候开始混淆-->
                        <phase>package</phase>
                        <goals>
                            <!--混淆-->
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <injar>${project.build.finalName}.jar</injar>
                    <!--输出的jar-->
                    <outjar>${project.build.finalName}.jar</outjar>
                    <outputDirectory>${project.basedir}/target</outputDirectory>
                    <!--是否混淆-->
                    <obfuscate>true</obfuscate>
                    <!--是否允许进行代码混淆时将依赖放入临时文件夹(防止依赖太多或者依赖层级过深超出windows命令最大长度报错)-->
                    <putLibraryJarsInTempDir>true</putLibraryJarsInTempDir>
                    <!--是否允许进行代码混淆时生成临时配置文件-->
                    <generateTemporaryConfigurationFile>true</generateTemporaryConfigurationFile>
                    <!--proguard官网推荐-->
                    <inLibsFilter>!META-INF/**,!META-INF/versions/9/**.class</inLibsFilter>

                    <options>
                        <!--jdk版本-->
                        <option>-target 1.8</option>
                        <!--不做收缩-->
                        <option>-dontshrink</option>
                        <!--不做代码优化-->
                        <option>-dontoptimize</option>
                        <!--查找和替换在代码中以字符串形式引用的类名(处理代码中com.example.MyClass格式类名)-->
                        <option>-adaptclassstrings</option>
                        <!--proguard官网推荐-->
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <option>-dontusemixedcaseclassnames</option>
                        <option>-useuniqueclassmembernames</option>
                        <option>-keepparameternames</option>
                        <option>-keeppackagenames</option>
                        <option>-keepattributes *Annotation*, Signature, Exceptions, InnerClasses, EnclosingMethod, LineNumberTable, LocalVariableTable, LocalVariableTypeTable, RuntimeVisibleAnnotations, RuntimeInvisibleAnnotations, RuntimeVisibleParameterAnnotations, RuntimeInvisibleParameterAnnotations, MethodParameters</option>
                        <!--保持目录结构-->
                        <option>-keepdirectories</option>
                        <option>-keepclassmembers enum * { *; }</option>
                        <option>-keepclassmembers public class * { void set*(***); *** get*(); }</option>
                        <option>-keep class com.fw.formland.backend.entity.**{*;}</option>
                        <option>-keep class com.fw.formland.backend.mapper.**{*;}</option>
                        <option>-keep class com.fw.formland.backend.model.**{*;}</option>
                        <option>-keep class com.fw.formland.backend.mapper.** { *; }</option>
                        <option>-keepclassmembers class com.fw.formland.backend.mapper.** { *; }</option>

                        <option>
                            -keep class * {
                            @org.springframework.beans.factory.annotation.Value *;
                            @javax.annotation.PostConstruct *;
                            @javax.annotation.PreDestroy *;
                            @org.springframework.scheduling.annotation.Async *;
                            @org.springframework.context.annotation.Bean *;
                            @org.springframework.context.annotation.Configuration *;
                            @org.springframework.stereotype.Component *;
                            }
                        </option>
                        <option>-keepclasseswithmembers public class *{
                            public static void main(java.lang.String[]); }
                        </option>
                    </options>
                    <libs>
                        <lib>${java.home}/lib/rt.jar</lib>
                        <lib>${java.home}/lib/jsse.jar</lib>
                    </libs>
                    <!--多模块项目中，如果有别的模块应用了当前模块的代码，则需将其它模块也进行混淆处理并以代码的形式放到最后的输出文件中，而不是以jar包的形式-->
                    <assembly>
                        <inclusions>
                            <inclusion>
                                <groupId>com.fw.formland</groupId>
                                <artifactId>bpm-extend</artifactId>
                            </inclusion>
                            <inclusion>
                                <groupId>com.fw.formland</groupId>
                                <artifactId>formland_base</artifactId>
                            </inclusion>
                        </inclusions>
                    </assembly>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.5.15</version>
                <configuration>
                    <!-- 如果没有该配置，devtools不会生效 -->
                    <fork>true</fork>
                    <!--多模块项目中，如果有别的模块应用了当前模块的代码，在做完上述assembly的配置之后，需要在最后输出文件的依赖中排除掉assembly中配置的两个依赖项-->
                    <excludeGroupIds>com.fw.formland</excludeGroupIds>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <warName>${project.artifactId}</warName>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>